package com.example.cozy_closet

import android.util.Log
import com.example.cozy_closet.models.CardData
import com.example.cozy_closet.models.ClothSuggester
import com.example.cozy_closet.models.Clothes
import com.example.cozy_closet.models.WeatherCodes
import com.example.cozy_closet.models.network.WeatherService
import com.example.cozy_closet.models.request.WeatherRequest
import com.example.cozy_closet.models.response.Weather
import com.example.cozy_closet.util.PrefUtil
import com.example.cozy_closet.util.toLocalDateTime
import com.google.gson.Gson
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*

class Presenter(private val mainActivityView: MainActivityView) {
    // Function to fetch weather data and show outfit suggestions
    fun fetchWeatherAndShowOutfit() {
        WeatherService().getWeather(
            WeatherRequest(
                latitude = 33.23,
                longitude = 44.33,
                hourly = "temperature_80m",
                currentWeather = true
            ),
            // On successful response from the API
            onSuccess = { response ->
                // Deserialize JSON response to a Weather object
                val weather =
                    Gson().fromJson(response.body?.string().toString(), Weather::class.java)
                // Get current date and time
                val currentTime = LocalDateTime.now().toString()
                // Convert date format to display in the UI
                val date = convertDateFormat(currentTime)
                // Get weather description based on the weather code
                val weatherDescription =
                    WeatherCodes.getCodeDescription(weather.currentWeather.weatherCode)
                // Display weather data in the UI
                mainActivityView.showWeatherData(
                    CardData(
                        weather,
                        date,
                        weatherDescription
                    )
                )
                // Check if the clothes data needs to be updated based on the current weather
                checkClothData(weather.currentWeather.temperature)
                // Hide the loading screen after fetching weather data
                mainActivityView.showLoadingScreen(false)
                // Hide the no network connection error if it was displayed previously
                mainActivityView.showNoNetworkConnection(false)
            },
            // On failure to fetch weather data from the API
            onFailure = {
                // Hide the loading screen after fetching weather data failed
                mainActivityView.showLoadingScreen(false)
                // Show the no network connection error screen
                mainActivityView.showNoNetworkConnection(true)
            }
        )
    }
    /**
    * Converts the given date and time string in ISO format to a human-readable date format.
    * Example: "2023-04-19T15:30:00.000Z" -> "Tue, 19 April 2023"
    * @param dateTime The date and time string in ISO format to be converted.
    * @return A string representing the date in the format "EEE, dd MMMM yyyy".
     */
    private fun convertDateFormat(dateTime: String): String {
        val formatterInput = DateTimeFormatter.ISO_DATE_TIME
        val formatterOutput = DateTimeFormatter.ofPattern("EEE, dd MMMM yyyy", Locale.ENGLISH)
        val parsedDateTime = LocalDateTime.parse(dateTime, formatterInput)
        return formatterOutput.format(parsedDateTime)
    }

    /**
     * Checks whether there is previously stored clothes data and whether it was created on the same day as the current date.
     * If there is no previously stored clothes data, generates a new set of clothes and stores them.
     * If the previously stored clothes data date was different than the next day, it will get different clothes
     * In both cases, calls [MainActivityView.showClothes] to display the clothes on the UI.
     *
     * @param currentTemperature The current temperature to use when generating new clothes.
     */
    private fun checkClothData(currentTemperature: Double) {
        // Get the created time of the previously stored clothes data, if any
        val createdTime = getClothesData().second?.toLocalDateTime()

        // If there is no previously stored clothes data, generate new clothes and store them
        if (createdTime == null) {
            setClothesData(currentTemperature, null)
        }
        // If the previously stored clothes data date was different than the next day, it will get different clothes
        else if (!isSameDayMonthYear(createdTime, currentLocalTime())) {
            setClothesData(currentTemperature, getClothesData().first!!)
        }

        // Display the clothes on the UI
        mainActivityView.showClothes(getClothesData().first!!)
    }

    /**
     * Sets the stored clothes data in the app preferences. The clothes data is generated by
     * [ClothSuggester] based on the current temperature and the previous clothes data if it exists.
     * @param currentTemperature The current temperature to be used in suggesting new clothes.
     * @param currentClothes The previously stored clothes data if it exists.
     */
    private fun setClothesData(currentTemperature: Double, currentClothes: Clothes?) {
        PrefUtil.storeClothes(
            ClothSuggester().suggestClothes(currentTemperature, currentClothes)
        )
    }

    /**
     * Gets the stored clothes data from the app preferences.
     * @return A [Pair] of the stored [Clothes] data and the timestamp it was last updated.
     */
    private fun getClothesData(): Pair<Clothes?, String?> = PrefUtil.getStoredClothes()

    /**
     * Compares two [LocalDateTime] objects to see if they are on the same day.
     * @param dateTime1 The first [LocalDateTime] object to compare.
     * @param dateTime2 The second [LocalDateTime] object to compare.
     * @return `true` if the two objects are on the same day, `false` otherwise.
     */
    private fun isSameDayMonthYear(dateTime1: LocalDateTime?, dateTime2: LocalDateTime): Boolean {
        return dateTime1?.toLocalDate() == dateTime2.toLocalDate()
    }

    private fun currentLocalTime() = LocalDateTime.now()

}